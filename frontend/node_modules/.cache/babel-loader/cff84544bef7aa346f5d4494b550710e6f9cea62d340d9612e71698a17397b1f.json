{"ast":null,"code":"import axios from 'axios';\nconst loginApi = (data, setErrorMessage, setToken, setUserData) => {\n  try {\n    const email = data.email;\n    const password = data.password;\n    axios.post('/api/login', {\n      email,\n      password\n    }).then(response => {\n      setUserData(response.data.userData);\n      setToken(response.data.token);\n    }).catch(error => {\n      setToken('');\n      setUserData({});\n      if (!!error.response && !!error.response.status) {\n        if (error.response.status === 400) {\n          setErrorMessage('Invalid email or password');\n        } else if (error.response.status === 401) {\n          setErrorMessage('Email not verified');\n        }\n      } else {\n        console.error(error);\n        setErrorMessage('Login failed');\n      }\n      return false;\n    });\n  } catch (error) {\n    setErrorMessage('Login failed');\n    setToken('');\n    setUserData({});\n    console.error(error);\n    return false;\n  }\n};\nexport { loginApi };","map":{"version":3,"names":["axios","loginApi","data","setErrorMessage","setToken","setUserData","email","password","post","then","response","userData","token","catch","error","status","console"],"sources":["/Users/abdallahadel/gizasystems/frontend/src/api/login.js"],"sourcesContent":["import axios from 'axios';\nconst loginApi = (data, setErrorMessage, setToken, setUserData) => {\n    try {\n        const email = data.email;\n        const password = data.password;\n        axios.post('/api/login', {\n            email,\n            password\n        }).then((response) => {\n            setUserData(response.data.userData);\n            setToken(response.data.token);\n        }).catch((error) => {\n            setToken('');\n            setUserData({});\n            if(!!error.response && !!error.response.status){\n                if(error.response.status === 400){\n                    setErrorMessage('Invalid email or password');\n                } else if(error.response.status === 401){\n                    setErrorMessage('Email not verified');\n                }\n            } else {\n                console.error(error);\n                setErrorMessage('Login failed');\n            }\n            return false;\n        });\n    } catch (error) {\n        setErrorMessage('Login failed');\n        setToken('');\n        setUserData({});\n        console.error(error);\n        return false;\n    }\n};\n\nexport { loginApi };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,QAAQ,GAAGA,CAACC,IAAI,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,WAAW,KAAK;EAC/D,IAAI;IACA,MAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAK;IACxB,MAAMC,QAAQ,GAAGL,IAAI,CAACK,QAAQ;IAC9BP,KAAK,CAACQ,IAAI,CAAC,YAAY,EAAE;MACrBF,KAAK;MACLC;IACJ,CAAC,CAAC,CAACE,IAAI,CAAEC,QAAQ,IAAK;MAClBL,WAAW,CAACK,QAAQ,CAACR,IAAI,CAACS,QAAQ,CAAC;MACnCP,QAAQ,CAACM,QAAQ,CAACR,IAAI,CAACU,KAAK,CAAC;IACjC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChBV,QAAQ,CAAC,EAAE,CAAC;MACZC,WAAW,CAAC,CAAC,CAAC,CAAC;MACf,IAAG,CAAC,CAACS,KAAK,CAACJ,QAAQ,IAAI,CAAC,CAACI,KAAK,CAACJ,QAAQ,CAACK,MAAM,EAAC;QAC3C,IAAGD,KAAK,CAACJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAC;UAC7BZ,eAAe,CAAC,2BAA2B,CAAC;QAChD,CAAC,MAAM,IAAGW,KAAK,CAACJ,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAC;UACpCZ,eAAe,CAAC,oBAAoB,CAAC;QACzC;MACJ,CAAC,MAAM;QACHa,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;QACpBX,eAAe,CAAC,cAAc,CAAC;MACnC;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOW,KAAK,EAAE;IACZX,eAAe,CAAC,cAAc,CAAC;IAC/BC,QAAQ,CAAC,EAAE,CAAC;IACZC,WAAW,CAAC,CAAC,CAAC,CAAC;IACfW,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC;AAED,SAASb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}