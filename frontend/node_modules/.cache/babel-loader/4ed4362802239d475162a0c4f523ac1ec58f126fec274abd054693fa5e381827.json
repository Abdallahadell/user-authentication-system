{"ast":null,"code":"const axios = require('axios');\nconst loginApi = (email, password, setErrorMessage, setToken, setUserData) => {\n  try {\n    axios.post('/api/login', {\n      email,\n      password\n    }).then(response => {\n      setUserData(response.data.userData);\n      setToken(response.data.token);\n    }).catch(error => {\n      setToken('');\n      setUserData({});\n      if (!!error.response && !!error.response.status) {\n        if (error.response.status === 400) {\n          setErrorMessage('Invalid email or password');\n        } else if (error.response.status === 401) {\n          setErrorMessage('Email not verified');\n        }\n      } else {\n        console.error(error);\n        setErrorMessage('Login failed');\n      }\n      return false;\n    });\n  } catch (error) {\n    setErrorMessage('Login failed');\n    setToken('');\n    setUserData({});\n    console.error(error);\n    return false;\n  }\n};\nmodule.exports = {\n  loginApi\n};","map":{"version":3,"names":["axios","require","loginApi","email","password","setErrorMessage","setToken","setUserData","post","then","response","data","userData","token","catch","error","status","console","module","exports"],"sources":["/Users/abdallahadel/gizasystems/frontend/src/api/login.js"],"sourcesContent":["const axios = require('axios');\n\nconst loginApi = (email, password, setErrorMessage, setToken, setUserData) => {\n    try {\n        axios.post('/api/login', {\n            email,\n            password\n        }).then((response) => {\n            setUserData(response.data.userData);\n            setToken(response.data.token);\n        }).catch((error) => {\n            setToken('');\n            setUserData({});\n            if(!!error.response && !!error.response.status){\n                if(error.response.status === 400){\n                    setErrorMessage('Invalid email or password');\n                } else if(error.response.status === 401){\n                    setErrorMessage('Email not verified');\n                }\n            } else {\n                console.error(error);\n                setErrorMessage('Login failed');\n            }\n            return false;\n        });\n    } catch (error) {\n        setErrorMessage('Login failed');\n        setToken('');\n        setUserData({});\n        console.error(error);\n        return false;\n    }\n};\nmodule.exports = {loginApi};"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9B,MAAMC,QAAQ,GAAGA,CAACC,KAAK,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,WAAW,KAAK;EAC1E,IAAI;IACAP,KAAK,CAACQ,IAAI,CAAC,YAAY,EAAE;MACrBL,KAAK;MACLC;IACJ,CAAC,CAAC,CAACK,IAAI,CAAEC,QAAQ,IAAK;MAClBH,WAAW,CAACG,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAAC;MACnCN,QAAQ,CAACI,QAAQ,CAACC,IAAI,CAACE,KAAK,CAAC;IACjC,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;MAChBT,QAAQ,CAAC,EAAE,CAAC;MACZC,WAAW,CAAC,CAAC,CAAC,CAAC;MACf,IAAG,CAAC,CAACQ,KAAK,CAACL,QAAQ,IAAI,CAAC,CAACK,KAAK,CAACL,QAAQ,CAACM,MAAM,EAAC;QAC3C,IAAGD,KAAK,CAACL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAC;UAC7BX,eAAe,CAAC,2BAA2B,CAAC;QAChD,CAAC,MAAM,IAAGU,KAAK,CAACL,QAAQ,CAACM,MAAM,KAAK,GAAG,EAAC;UACpCX,eAAe,CAAC,oBAAoB,CAAC;QACzC;MACJ,CAAC,MAAM;QACHY,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;QACpBV,eAAe,CAAC,cAAc,CAAC;MACnC;MACA,OAAO,KAAK;IAChB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOU,KAAK,EAAE;IACZV,eAAe,CAAC,cAAc,CAAC;IAC/BC,QAAQ,CAAC,EAAE,CAAC;IACZC,WAAW,CAAC,CAAC,CAAC,CAAC;IACfU,OAAO,CAACF,KAAK,CAACA,KAAK,CAAC;IACpB,OAAO,KAAK;EAChB;AACJ,CAAC;AACDG,MAAM,CAACC,OAAO,GAAG;EAACjB;AAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}