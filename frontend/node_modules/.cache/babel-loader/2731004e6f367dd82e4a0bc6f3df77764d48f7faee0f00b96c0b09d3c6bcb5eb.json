{"ast":null,"code":"import axios from 'axios';\nconst registrationApi = async (formData, setSubmitMsg) => {\n  const BASE_API_URL = process.env.REACT_APP_API_BASE_URL || '';\n  const json = JSON.stringify({\n    username: formData.username,\n    email: formData.email,\n    password: formData.password\n  });\n  try {\n    const response = await axios.post(`${BASE_API_URL}/api/registration`, json, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    // Check for success (2xx status codes)\n    if (response.status >= 200 && response.status < 300) {\n      setSubmitMsg('Registration successful');\n      return true;\n    } else if (response.status === 400) {\n      // Handle specific error for 400 Bad Request\n      const errorData = response.data; // Assuming the error details are in JSON format\n      console.error('Bad Request:', errorData);\n      setSubmitMsg('Registration failed');\n      return false;\n      // Handle the error, update state, or show a user-friendly message\n    } else {\n      // Handle other error status codes\n      console.error('Error:', response.statusText);\n      //show a user-friendly message\n      setSubmitMsg('Registration failed');\n      return false;\n    }\n  } catch (error) {\n    console.error('Error:', error.message);\n    setSubmitMsg('Registration failed');\n    return false;\n    // Handle the error, update state, or show a user-friendly message\n  }\n};","map":{"version":3,"names":["axios","registrationApi","formData","setSubmitMsg","BASE_API_URL","process","env","REACT_APP_API_BASE_URL","json","JSON","stringify","username","email","password","response","post","headers","status","errorData","data","console","error","statusText","message"],"sources":["/Users/abdallahadel/gizasystems/frontend/src/api/registration.js"],"sourcesContent":["import axios from 'axios';\nconst registrationApi = async (formData, setSubmitMsg) => {\n    const BASE_API_URL = process.env.REACT_APP_API_BASE_URL || '';\n\n    const json = JSON.stringify({\n        username: formData.username,\n        email: formData.email,\n        password: formData.password,\n    });\n    \n    try {\n        const response = await axios.post(`${BASE_API_URL}/api/registration`, json, {\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n        // Check for success (2xx status codes)\n        if (response.status >= 200 && response.status < 300) {\n            setSubmitMsg('Registration successful');\n            return true;\n        } else if (response.status === 400) {\n            // Handle specific error for 400 Bad Request\n            const errorData = response.data; // Assuming the error details are in JSON format\n            console.error('Bad Request:', errorData);\n            setSubmitMsg('Registration failed');\n            return false;\n            // Handle the error, update state, or show a user-friendly message\n        } else {\n            // Handle other error status codes\n            console.error('Error:', response.statusText);\n            //show a user-friendly message\n            setSubmitMsg('Registration failed');\n            return false;\n        }\n    } catch (error) {\n        console.error('Error:', error.message);\n        setSubmitMsg('Registration failed');\n        return false;\n    // Handle the error, update state, or show a user-friendly message\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,eAAe,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,YAAY,KAAK;EACtD,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAI,EAAE;EAE7D,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IACxBC,QAAQ,EAAET,QAAQ,CAACS,QAAQ;IAC3BC,KAAK,EAAEV,QAAQ,CAACU,KAAK;IACrBC,QAAQ,EAAEX,QAAQ,CAACW;EACvB,CAAC,CAAC;EAEF,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAI,CAAE,GAAEX,YAAa,mBAAkB,EAAEI,IAAI,EAAE;MACxEQ,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF;IACA,IAAIF,QAAQ,CAACG,MAAM,IAAI,GAAG,IAAIH,QAAQ,CAACG,MAAM,GAAG,GAAG,EAAE;MACjDd,YAAY,CAAC,yBAAyB,CAAC;MACvC,OAAO,IAAI;IACf,CAAC,MAAM,IAAIW,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;MAChC;MACA,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACjCC,OAAO,CAACC,KAAK,CAAC,cAAc,EAAEH,SAAS,CAAC;MACxCf,YAAY,CAAC,qBAAqB,CAAC;MACnC,OAAO,KAAK;MACZ;IACJ,CAAC,MAAM;MACH;MACAiB,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEP,QAAQ,CAACQ,UAAU,CAAC;MAC5C;MACAnB,YAAY,CAAC,qBAAqB,CAAC;MACnC,OAAO,KAAK;IAChB;EACJ,CAAC,CAAC,OAAOkB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACE,OAAO,CAAC;IACtCpB,YAAY,CAAC,qBAAqB,CAAC;IACnC,OAAO,KAAK;IAChB;EACA;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}